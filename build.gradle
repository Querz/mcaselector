plugins {
	id 'java'
	id 'application'
	id 'eclipse'
	id 'idea'
	id 'org.openjfx.javafxplugin' version '0.0.12'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'com.github.ben-manes.versions' version '0.42.0'
}

group 'net.querz'
sourceCompatibility = JavaLanguageVersion.of(17)
targetCompatibility = JavaLanguageVersion.of(17)
compileJava.options.encoding = 'UTF-8'
application.mainClass = 'net.querz.mcaselector.Main'

javafx {
	version = "$sourceCompatibility"
	modules = ['javafx.controls', 'javafx.swing']
}

idea {
	module.downloadJavadoc = true
	module.downloadSources = true
}

repositories {
	mavenCentral()
	maven {
		url 'https://jitpack.io/'
	}
}

dependencies {
	implementation 'com.github.Querz:NBT:f279a237fb'
	implementation 'org.json:json:20220320'
	implementation 'ar.com.hjg:pngj:2.1.0'
	implementation 'org.xerial:sqlite-jdbc:3.36.0.3'
	implementation 'it.unimi.dsi:fastutil:8.5.8'
	implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
	implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
	implementation 'commons-cli:commons-cli:1.5.0'
	implementation 'me.tongfei:progressbar:0.9.3'
	implementation 'org.codehaus.groovy:groovy-jsr223:3.0.11'

	testImplementation 'junit:junit:4.13.2'
	testImplementation 'commons-io:commons-io:2.11.0'
}

task copyRuntimeLibs(type: Copy) {
	from configurations.shadow
	into file("$buildDir/libs/lib/")
	exclude {it.file.name.startsWith('javafx')}
}

task minifyCss {
	doLast {
		minCss(
			new File("${sourceSets.main.resources.srcDirs[0]}/style.css"),
			new File("${sourceSets.main.output.resourcesDir}/style.css"))
	}
	dependsOn processResources
}

jar {
	archiveFileName = "${project.name}-${project.version}-min.jar"
	manifest.attributes (
		'Main-Class': application.mainClass,
		'Application-Version': project.version,
		'Class-Path': configurations.shadow.files.stream()
				.filter($it -> !$it.name.startsWith('javafx')).collect{"lib/$it.name"}.join(' ')
	)
	from 'LICENSE'
	dependsOn minifyCss
	dependsOn copyRuntimeLibs
}

shadowJar {
	minimize {
		exclude(dependency('org.apache.logging.log4j:log4j-core:.*'))
		exclude(dependency('org.codehaus.groovy:groovy-jsr223:.*'))
	}
	dependencies {
		exclude(dependency(':javafx.*:.*'))
	}
	archiveFileName = "${project.name}-${project.version}.jar"
	from 'LICENSE'
}

assemble.dependsOn shadowJar

// ---------------------------------------------------------------------------------------------------------------------

/**
 * "Minifies" a css file by removing all comments, \n, \t and all duplicate spaces.
 *
 * @param i The input css file
 * @param o The output css file
 * @throws IOException If something goes wrong during reading or writing
 */
import java.nio.file.Files

static minCss(File i, File o) throws IOException {
	String s = Files.readString(i.toPath())
	s = s.replace("\t", "").replace("\r\n", " ").replace("\n", " ").replaceAll("/\\*.*?\\*/", "").replaceAll(" {2,}", " ").trim()
	Files.writeString(o.toPath(), s)
}