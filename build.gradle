plugins {
	id 'java'
	id 'application'
	id 'eclipse'
	id 'idea'
	id 'org.openjfx.javafxplugin' version '0.1.0'
	id 'com.gradleup.shadow' version '9.0.0-beta11'
	id 'com.github.ben-manes.versions' version '0.52.0'
	id "io.github.jwharm.flatpak-gradle-generator" version "1.5.0"
}

group 'net.querz'
compileJava.options.encoding = 'UTF-8'
application.mainClass = 'net.querz.mcaselector.Main'

java {
	sourceCompatibility = JavaVersion.VERSION_21
}

javafx {
	version = "$java.sourceCompatibility"
	modules = ['javafx.controls', 'javafx.swing']
}

idea {
	module.downloadJavadoc = true
	module.downloadSources = true
}

repositories {
	mavenCentral()
	maven {
		url 'https://jitpack.io/'
	}
	maven {
		url 'https://plugins.gradle.org/m2/'
	}
	maven { url "./offline-repository" }
}

dependencies {
	implementation 'com.github.Querz:NBT:6bc3de6961'
	implementation 'com.google.code.gson:gson:2.12.1'
	implementation 'it.unimi.dsi:fastutil:8.5.15'
	implementation 'org.apache.logging.log4j:log4j-api:2.24.3'
	implementation 'org.apache.logging.log4j:log4j-core:2.24.3'
	implementation 'org.slf4j:slf4j-simple:2.0.16'
	implementation 'commons-cli:commons-cli:1.9.0'
	implementation 'me.tongfei:progressbar:0.10.1'
	implementation 'org.apache.groovy:groovy-jsr223:4.0.26'
	implementation 'org.fxmisc.richtext:richtextfx:0.11.4'
	implementation 'org.lz4:lz4-java:1.8.0'
	implementation 'org.atteo.classindex:classindex:3.13'
	implementation 'org.iq80.leveldb:leveldb:0.12'
  
	shadow 'com.github.Querz:NBT:6bc3de6961'
	shadow 'com.google.code.gson:gson:2.12.1'
	shadow 'it.unimi.dsi:fastutil:8.5.15'
	shadow 'org.apache.logging.log4j:log4j-api:2.24.3'
	shadow 'org.apache.logging.log4j:log4j-core:2.24.3'
	shadow 'org.slf4j:slf4j-simple:2.0.16'
	shadow 'commons-cli:commons-cli:1.9.0'
	shadow 'me.tongfei:progressbar:0.10.1'
	shadow 'org.apache.groovy:groovy-jsr223:4.0.26'
	shadow 'org.fxmisc.richtext:richtextfx:0.11.4'
	shadow 'org.lz4:lz4-java:1.8.0'
	shadow 'org.atteo.classindex:classindex:3.13'
    shadow 'org.iq80.leveldb:leveldb:0.12'

	annotationProcessor('org.atteo.classindex:classindex:3.13')
	annotationProcessor('org.apache.logging.log4j:log4j-core:2.24.3')

	testImplementation 'junit:junit:4.13.2'
	testImplementation 'commons-io:commons-io:2.18.0'
}

compileJava {
	options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
}

tasks.register('copyRuntimeLibs', Copy) {
	from configurations.shadow
	into layout.buildDirectory.dir('libs/lib')
	exclude { it.file.name.startsWith('javafx') }
}

tasks.register('minifyCss') {
	doLast {
		var styleDir = java.nio.file.Path.of("${sourceSets.main.resources.srcDirs[0]}", "style")
		Files.find(styleDir, Integer.MAX_VALUE, (filePath, fileAttr) -> fileAttr.isRegularFile())
				.forEach(p -> {
					minCss(p, java.nio.file.Path.of("${sourceSets.main.output.resourcesDir}", "style", styleDir.relativize(p).toString()))
				})
	}
	dependsOn processResources
}

tasks.register('generator', JavaExec) {
	mainClass = 'net.querz.mcaselector.version.mapping.generator.Main'
	classpath = sourceSets.main.runtimeClasspath
}

tasks.flatpakGradleGenerator {
  outputFile = file("flatpak-sources.json")
  downloadDirectory = "./offline-repository"
}

jar {
	archiveFileName = "${project.name}-${project.version}-min.jar"
	manifest.attributes (
		'Main-Class': application.mainClass,
		'Application-Version': project.version,
		'Copyright': project.findProperty('application.copyright'),
		'Class-Path': configurations.shadow.files.stream()
				.filter($it -> !$it.name.startsWith('javafx')).collect{"lib/$it.name"}.join(' ')
	)
	exclude 'licenses/'
	from 'LICENSE'
	dependsOn minifyCss
	dependsOn copyRuntimeLibs
	finalizedBy shadowJar
}

shadowJar {
	minimize {
		exclude(dependency('org.apache.logging.log4j:log4j-core:.*'))
		exclude(dependency('org.apache.groovy:groovy-jsr223:.*'))
		exclude(dependency('org.lz4:lz4-java:.*'))
	}
	dependencies {
		exclude(dependency(':javafx.*:.*'))
	}
	archiveFileName = "${project.name}-${project.version}.jar"
	configurations = [project.configurations.shadow]
	from 'LICENSE'
}

assemble.dependsOn shadowJar

// ---------------------------------------------------------------------------------------------------------------------

/**
 * "Minifies" a css file by removing all comments, \n, \t and all duplicate spaces.
 *
 * @param i The input css file
 * @param o The output css file
 * @throws IOException If something goes wrong during reading or writing
 */
import java.nio.file.Files

static minCss(i, o) throws IOException {
	String s = Files.readString(i)
	s = s.replace("\t", "").replace("\r\n", " ").replace("\n", " ").replaceAll("/\\*.*?\\*/", "").replaceAll(" {2,}", " ").trim()
	try {Files.writeString(o, s)}
	catch (Exception ex) {
		ex.printStackTrace()
	}
}