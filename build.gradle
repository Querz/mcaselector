import java.nio.charset.StandardCharsets
import java.nio.file.Files

plugins {
	id "com.github.johnrengelman.shadow" version "7.0.0"
	id 'java'
	id 'eclipse'
	id 'idea'
}

group 'net.querz.mcaselector'
version '1.17.1'
def appName = 'MCA Selector'
def appUrl = 'https://github.com/Querz/mcaselector'
def appAuthor = 'Querz'

sourceCompatibility = 17

idea {
	module.downloadSources = true
}

repositories {
	mavenCentral()
	maven {
		url 'https://jitpack.io/'
	}
}

configurations {
	project.configurations.implementation.canBeResolved = true
}

dependencies {
	implementation 'com.github.Querz:NBT:4192a95c9d'
	implementation 'org.json:json:20201115'
	implementation 'ar.com.hjg:pngj:2.1.0'
	implementation 'org.xerial:sqlite-jdbc:3.34.0'
	implementation 'it.unimi.dsi:fastutil:8.5.6'
	testImplementation 'junit:junit:4.12'
	testImplementation 'commons-io:commons-io:2.6'
}

task copyRuntimeLibs(type: Copy) {
	from configurations.implementation
	into file("$buildDir/libs/lib/")
}

jar {
	archiveFileName = "${project.name}-${project.version}-min.jar"
	manifest.attributes (
		'Main-Class': 'net.querz.mcaselector.Main',
		'Application-Version': project.version,
		'Class-Path': configurations.implementation.files.collect{"lib/$it.name"}.join(' ')
	)
	exclude 'licenses/'
	from 'LICENSE'
}

shadowJar {
	minimize()
	archiveFileName = "${project.name}-${project.version}.jar"
	configurations = [project.configurations.implementation]
	exclude 'LICENSE.txt', 'NOTICE.txt'
	from 'LICENSE'
}

compileJava {
	options.encoding = 'UTF-8'
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

task installer {
	doLast {
		def innoSetupDir = new File("${buildDir}/inno")
		
		delete innoSetupDir
		innoSetupDir.mkdir()

		def innoSetupLibDir = new File("${innoSetupDir}/lib")
		innoSetupLibDir.mkdir()

		// assemble license file
		String finalLicense = new String(Files.readAllBytes(new File("${rootProject.projectDir}/LICENSE").toPath()))
		finalLicense += "\n\n\n" +
				"############################################################\n" +
				"############################################################\n" +
				"##\n" +
				"##                   3RD PARTY LICENSES\n" +
				"##\n" +
				"############################################################\n" +
				"############################################################"
		for (File file : new File("${rootProject.projectDir}/src/main/resources/licenses").listFiles()) {
			finalLicense = appendLicense(file, finalLicense)
		}
		finalLicense = appendLicense(new File("${rootProject.projectDir}/travis/winrun4j/winrun4j.license.txt"), finalLicense)
		finalLicense = appendLicense(new File("${rootProject.projectDir}/src/main/resources/font/notosans-regular.license.txt"), finalLicense)
		Files.write(new File(innoSetupDir, "LICENSE").toPath(), finalLicense.getBytes(StandardCharsets.UTF_8))

		copy {
			from("${rootProject.projectDir}/inno/icon.ico")
			from("${rootProject.projectDir}/inno/small.bmp")
			from("${rootProject.projectDir}/inno/large.bmp")
			from("${buildDir}/libs/${project.name}-${project.version}-min.jar")
			from("${rootProject.projectDir}/7za.exe")
			into(innoSetupDir)
			rename("${project.name}-${project.version}-min.jar", "${project.name}.jar")
		}

		copy {
			from("${buildDir}/libs/lib/")
			include('*.jar')
			into(innoSetupLibDir)
		}

		copy {
			from("${rootProject.projectDir}/inno/inno.iss")
			expand([
					applicationVersion: project.version,
					applicationName: appName,
					applicationUrl: appUrl,
					applicationAuthor: appAuthor,
					applicationJar: "${project.name}.jar"
			])
			into(innoSetupDir)
		}
	}
}

task updateReadme {
	doLast {
		// update version in README
		ant.replaceregexp(
				match: '(?:Download Version )\\d+\\.\\d+(?:\\.\\d+)?',
				replace: "Download Version ${version}",
				flags: 'g',
				byline: true) {
			fileset dir: '.', includes: 'README.md'
		}
		ant.replaceregexp(
				match: '(?:download/)\\d+\\.\\d+(?:\\.\\d+)?',
				replace: "download/${version}",
				flags: 'g',
				byline: true) {
			fileset dir: '.', includes: 'README.md'
		}
		ant.replaceregexp(
				match: '(?:mcaselector-)\\d+\\.\\d+(?:\\.\\d+)?',
				replace: "mcaselector-${version}",
				flags: 'g',
				byline: true) {
			fileset dir: '.', includes: 'README.md'
		}

		// replace version for exe
		if ("${version}".split("\\.").length == 2) {
			ant.replaceregexp(
					match: '\\d+\\.\\d+(?:\\.\\d+)?\\.0',
					replace: "${version}.0.0",
					flags: 'g',
					byline: true) {
				fileset dir: './travis/winrun4j/', includes: 'resource.rc'
			}
			ant.replaceregexp(
					match: '\\d+\\,\\d+(?:\\,\\d+)?\\,0',
					replace: "${version}".replace('.', ',') + ",0,0",
					flags: 'g',
					byline: true) {
				fileset dir: './travis/winrun4j/', includes: 'resource.rc'
			}
		} else if ("${version}".split("\\.").length == 3) {
			ant.replaceregexp(
					match: '\\d+\\.\\d+(?:\\.\\d+)?\\.0',
					replace: "${version}.0",
					flags: 'g',
					byline: true) {
				fileset dir: './travis/winrun4j/', includes: 'resource.rc'
			}
			ant.replaceregexp(
					match: '\\d+\\,\\d+(?:\\,\\d+)?\\,0',
					replace: "${version}".replace('.', ',') + ",0",
					flags: 'g',
					byline: true) {
				fileset dir: './travis/winrun4j/', includes: 'resource.rc'
			}
		}
		ant.replaceregexp(
				match: '"ProductVersion",     "\\d+\\.\\d+(?:\\.\\d+)?',
				replace: "\"ProductVersion\",     \"${version}",
				flags: 'g',
				byline: true) {
			fileset dir: './travis/winrun4j/', includes: 'resource.rc'
		}
	}
}

task minifyCss {
	doLast {
		minCss(
				new File("${sourceSets.main.resources.srcDirs[0]}/style.css"),
				new File("${sourceSets.main.output.resourcesDir}/style.css"))
	}
}

// task dependencies
jar.dependsOn minifyCss
jar.dependsOn copyRuntimeLibs
jar.finalizedBy shadowJar
assemble.dependsOn shadowJar
installer.dependsOn jar

// ---------------------------------------------------------------------------------------------------------------------

/**
 * "Minifies" a css file by removing all comments, \n, \t and all duplicate spaces.
 *
 * @param i The input css file
 * @param o The output css file
 * @throws IOException If something goes wrong during reading or writing
 */
static minCss(File i, File o) throws IOException {
	String s = Files.readString(i.toPath())
	s = s.replace("\t", "").replace("\r\n", " ").replace("\n", " ").replaceAll("/\\*.*?\\*/", "").replaceAll(" {2,}", " ").trim()
	Files.writeString(o.toPath(), s)
}

static String pad(String s, char p, int l) {
	StringBuilder sb = new StringBuilder(l)
	for (int i = 0; i < l - s.length(); i += 2)
		sb.append(p)
	return sb.append(s).toString()
}

static String appendLicense(File f, String l) {
	String content = new String(Files.readAllBytes(f.toPath()))
	if (f.getName().endsWith(".license.txt")) {
		String licenseName = f.getName().replace(".license.txt", "").toUpperCase()
		l += "\n\n\n" +
				"############################################################\n" +
				"#" + pad("License for " + licenseName, ' ' as char, 58) + "\n" +
				"############################################################\n\n" +
				content
	}
	return l
}
